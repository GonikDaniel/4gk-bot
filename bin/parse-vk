#!/usr/bin/env node

/*=================================
=            Bootstrap            =
=================================*/

'use strict';

const fetch      = require('node-fetch');
const fs         = require('fs');

const mongoose   = require('mongoose');
const Question   = require('./models/questions.js');

const DB         = require('./db.connect.js');
DB.connect();

/*=====  End of Bootstrap  ======*/


/*===================================
=            VK requests            =
===================================*/

// https://new.vk.com/questions_of_chgk
const groupId = 62655504;
const URL = `https://api.vk.com/method/wall.get?owner_id=-${groupId}&offset=1&count=10`;
// const headers = new Headers();

const options = { 
  method: 'GET',
  // headers: headers,
  cache: 'default'
};

const replacer = (key, value) => {
  const removeFields = /comments|reposts|attachments/i;
  if (removeFields.test(key)) {
    return undefined;
  };
  return value;
}

fetch(URL, options).then(res => {
  const contentType = res.headers.get('content-type');
  
  if(contentType && contentType.includes('application/json')) {
    return res.json().then(json => {
      if (json && json.response) {
        // in case of bad format
        try {
          const records = json.response.slice(1);
          let questions = records.filter(record => record.text.toLowerCase().includes('#вопрос') && record);
          questions = questions.map(question => {
            const reg = new RegExp(/\] (.*?)\[/);

            question.question = question.text.match(reg)[1];
            question.answer = question.attachment.photo.text;
            question.likes = question.likes.count;
            question.date = question.date * 1000;
            delete question.attachment;
            delete question.text;
            return question;
          });

          // fs.writeFile("./questions.json", JSON.stringify(questions, replacer, 2), e =>
          //   e ? console.log(e) : console.log("The file was saved!")
          // );

          const promises = [];
          questions.map((q, index) => {
            const question = new Question( q );
            question.id = question._id;
            // http://mongoosejs.com/docs/api.html#model_Model-save
            const promise = question.save(e => {
              e ? console.log(e) : console.log("The question was saved!");
            });
            promises.push(promise);
          });
          
          Promise.all( promises ).then(() => mongoose.connection.close());
        } catch(e) {
          console.log(e);
        }
      }
    });
  } else {
    console.log('Oops, we haven\'t got JSON!');
  }

});


/*=====  End of VK requests  ======*/



/*===============================
=            MySQL            =
===============================*/

// https://github.com/mysqljs/mysql
// const mysql      = require('mysql');
// const config     = require('./db.config.js');
// const connection = mysql.createConnection(config);

// connection.connect(e => {
//   if (e) {
//     console.log('error in DB connection');
//     connection.end();
//   }
// });


// const question  = { question: 'Hello MySQL', answer: 'Test' };

// const query = connection.query(
//   'INSERT INTO questions SET ?',
//   question,
//   (e, result) => {
//     console.log('Result: ', result);
//     console.log('Error: ', e);
//   }
// );
// console.log(query.sql); // INSERT INTO questions SET `id` = int (AUTO INCREMENT), `question` = 'Hello MySQL'


// connection.end();

/*=====  End of MySQL  ======*/